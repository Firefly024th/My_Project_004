import cv2
import numpy as np
import tensorflow.lite as tflite
import paho.mqtt.client as mqtt
import time

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
interpreter = tflite.Interpreter(model_path="waste_classifier.tflite")
interpreter.allocate_tensors()

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡∏û‡∏∏‡∏ï
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
input_shape = input_details[0]['shape']  # [1, 224, 224, 3]
input_size = (input_shape[1], input_shape[2])  # (224, 224)

# ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
cap = cv2.VideoCapture(1)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT
broker = "192.168.43.185"  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö MQTT Broker ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
port = 1883
topic = "Waste"

client = mqtt.Client(protocol=mqtt.MQTTv5)
client.connect(broker, port, 60)
client.loop_start()

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏•‡∏≤‡∏™‡∏Ç‡∏¢‡∏∞
class_labels = ["Can", "Plastic_Bottle", "General_Waste", "Glass"]

while True:
    ret, frame = cap.read()
    if not ret:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
        continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà

    # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
    cv2.imshow("Camera", frame)

    key = cv2.waitKey(1)

    if key == ord('c'):
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
        img = cv2.resize(frame, input_size)
        img = img.astype(np.float32) / 255.0  # Normalize
        img = np.expand_dims(img, axis=0)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏¥‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô [1, 224, 224, 3]

        # ‡πÉ‡∏™‡πà‡∏†‡∏≤‡∏û‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•
        interpreter.set_tensor(input_details[0]['index'], img)
        interpreter.invoke()

        # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        output_data = interpreter.get_tensor(output_details[0]['index'])[0]  # [4]

        print("üéØ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ç‡∏¢‡∏∞:")
        for i, label in enumerate(class_labels):
            print(f"üîπ {label}: {output_data[i]*100:.2f}%")

        # ‡∏´‡∏≤‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        predicted_class = np.argmax(output_data)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
        print(f"‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: {class_labels[predicted_class]}")

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á MQTT
        client.publish(topic, class_labels[predicted_class])
        print(f"üì° ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á MQTT: {class_labels[predicted_class]}")

    if key == ord('q'):
        break

# ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
cap.release()
cv2.destroyAllWindows()
client.loop_stop()
client.disconnect()
