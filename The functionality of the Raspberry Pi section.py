import gspread
from google.oauth2.service_account import Credentials
from oauth2client.service_account import ServiceAccountCredentials
import paho.mqtt.client as mqtt
import RPi.GPIO as GPIO
import time
import datetime

import os
import pickle
import base64
from email.mime.text import MIMEText
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from google.auth.transport.requests import Request


receiver_email = "66010024@kmitl.ac.th"
# API Sheet ********************************************************
try:
    scopes = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = Credentials.from_service_account_file("project-waste-ai-model428-98b2e2d2c90e.json", scopes=scopes)
    client = gspread.authorize(creds)
    sheet_id = "1fxla4XmFjHj9fniZ5YnBkVRg6HqxEsBKUBm2NxqZNo8"
    workbook = client.open_by_key(sheet_id)
    print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
except Exception as e:
    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheets: {e}")
    exit()

# API GMAIL***************************************************
# ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå credentials ‡πÅ‡∏•‡∏∞ token
CREDENTIALS_FILE = "GMAIL_API_WASTE_AI.json"
TOKEN_FILE = "token.pickle"

# Scope ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
SCOPES = ["https://www.googleapis.com/auth/gmail.send"]

def authenticate_gmail():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á OAuth 2.0 Token"""
    creds = None

    # ‡πÇ‡∏´‡∏•‡∏î Token ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if os.path.exists(TOKEN_FILE):
        with open(TOKEN_FILE, "rb") as token:
            creds = pickle.load(token)

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà
    if not creds or not creds.valid:
        try:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_FILE, SCOPES)
                creds = flow.run_local_server(port=0)

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Token ‡πÉ‡∏´‡∏°‡πà
            with open(TOKEN_FILE, "wb") as token:
                pickle.dump(creds, token)
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô: {e}")
            return None
    return creds

# mqtt*********************************************************
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
broker = "192.168.43.185"
port = 1883
topic = "Waste"

# ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Motor ************************************************************
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤ GPIO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Motor 1 (‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô)
IN1_1, IN2_1, IN3_1, IN4_1 = 4, 17, 27, 22

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤ GPIO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Motor 2 (‡πÅ‡∏î‡∏á)
IN1_2, IN2_2, IN3_2, IN4_2 = 11, 5, 6, 26

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏±‡∏ö‡∏Ç‡∏¢‡∏∞
can_count, plastic_count, general_count, glass_count = 0, 0, 0, 0

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GPIO
def setup_gpio():
    GPIO.setwarnings(False)
    GPIO.setmode(GPIO.BCM)
    for pin in [IN1_1, IN2_1, IN3_1, IN4_1, IN1_2, IN2_2, IN3_2, IN4_2]:
        GPIO.setup(pin, GPIO.OUT, initial=GPIO.LOW)

setup_gpio()

# ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏Ç‡∏≠‡∏á Step Motor
step_sequence = [
    [1, 0, 0, 1], [1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 0, 0],
    [0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1]
]

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏∏‡∏ô‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏∏‡∏ô‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå
def rotate(motor, degrees, direction=1, delay=0.001):
    global motor1_position, motor2_position
    motor_pins = (IN1_1, IN2_1, IN3_1, IN4_1) if motor == 1 else (IN1_2, IN2_2, IN3_2, IN4_2)
    steps_per_revolution = 512
    steps = int(steps_per_revolution * abs(degrees) / 360)  # ‡πÉ‡∏ä‡πâ abs(degrees) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏°‡∏∏‡∏°‡∏ö‡∏ß‡∏Å‡πÅ‡∏•‡∏∞‡∏•‡∏ö

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
    if degrees < 0:
        direction = -1  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏∏‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö ‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏∏‡∏ô‡∏ó‡∏ß‡∏ô‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤

    for _ in range(steps):
        for step in step_sequence[::direction]:
            for pin, val in zip(motor_pins, step):
                GPIO.output(pin, val)
            time.sleep(delay)

    if motor == 1:
        motor1_position = (motor1_position + degrees * direction) % 360
    else:
        motor2_position = (motor2_position + degrees * direction) % 360

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏Ç‡∏¢‡∏∞
def Can():
    global can_count
    rotate(1, 90,-1); time.sleep(1) # -90 ‡πÄ‡πÄ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤ 270
    rotate(2, 45, 1); can_count += 1; time.sleep(1)
    rotate(2, 45, -1); time.sleep(1)
    rotate(1, 90, 1); time.sleep(1)

def Plastic_Bottle():
    global plastic_count
    rotate(1, 90, 1); time.sleep(1)
    rotate(2, 45, 1); plastic_count += 1; time.sleep(1)
    rotate(2, 45, -1); time.sleep(1)
    rotate(1, 90, -1); time.sleep(1)

def General_Waste():
    global general_count
    rotate(2, 45, 1); general_count += 1; time.sleep(1)
    rotate(2, 45, -1); time.sleep(1)

def Glass():
    global glass_count
    rotate(1, 180, 1); time.sleep(1)
    rotate(2, 45, 1); glass_count += 1; time.sleep(1)
    rotate(2, 45, -1); time.sleep(1)
    rotate(1, 180, -1); time.sleep(1)

motor1_position, motor2_position = 0, 0  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô

def reset_position():
    global motor1_position, motor2_position
    
    if motor1_position != 0:
        print(f"üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Motor 1 ‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {motor1_position} ‡∏≠‡∏á‡∏®‡∏≤")
        rotate(1, -motor1_position)  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á motor1_position
        motor1_position = 0
    
    if motor2_position != 0:
        print(f"üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Motor 2 ‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {motor2_position} ‡∏≠‡∏á‡∏®‡∏≤")
        rotate(2, -motor2_position)  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á motor2_position
        motor2_position = 0
    
    print("‚úÖ ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")


# Gmail Api*************************************************
def send_email(receiver_email, subject, message_text):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•"""
    creds = authenticate_gmail()
    if not creds:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Gmail API ‡πÑ‡∏î‡πâ")
        return

    try:
        service = build("gmail", "v1", credentials=creds)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö UTF-8)
        message = MIMEText(message_text, "plain", "utf-8")
        message["to"] = receiver_email
        message["subject"] = subject
        raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode("utf-8")

        # ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        send_message = service.users().messages().send(
            userId="me", body={"raw": raw_message}
        ).execute()

        print(f"‚úÖ Email sent successfully! (Message ID: {send_message['id']})")

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {e}")


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets
# ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Api Sheet ********************************************************
#‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ *********************************************************
#today = input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY): ")
#today = datetime.datetime.now().strftime("%d/%m/%Y")  # ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ

def update_google_sheets(can_count, plastic_count, general_count, glass_count):
    receiver_email = "66010024@kmitl.ac.th"
    try:
        sheet = workbook.worksheet("Sheet1")
        #test‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÜ‡πÜ
        #today = input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY): ")
        today = datetime.datetime.now().strftime("%d/%m/%Y")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Google Sheets
        data = sheet.get_all_values()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        found = False
        new_can_count, new_plastic_count, new_general_count, new_glass_count = can_count, plastic_count, general_count, glass_count  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤

        for i, row in enumerate(data):
            if len(row) > 0 and row[0] == today:  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÅ‡∏ñ‡∏ß‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏û‡∏≠ ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                try:
                    old_can_count = int(row[1]) if len(row) > 1 and row[1].isdigit() else 0
                    old_plastic_count = int(row[2]) if len(row) > 2 and row[2].isdigit() else 0
                    old_general_count = int(row[3]) if len(row) > 3 and row[3].isdigit() else 0
                    old_glass_count = int(row[4]) if len(row) > 4 and row[4].isdigit() else 0
                except ValueError:
                    old_can_count, old_plastic_count, old_general_count, old_glass_count = 0, 0, 0, 0  # ‡∏ñ‡πâ‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ 0

                new_can_count = old_can_count + can_count
                new_plastic_count = old_plastic_count + plastic_count
                new_general_count = old_general_count + general_count
                new_glass_count = old_glass_count + glass_count

                sheet.update(f'A{i + 1}:E{i + 1}', [[today, new_can_count, new_plastic_count, new_general_count, new_glass_count]])
                print(f"‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {i + 1} Google Sheets ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÄ‡πÄ‡∏ñ‡∏ß‡πÄ‡∏î‡∏¥‡∏°!")
                found = True
                break

        if not found:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà
            sheet.append_row([today, new_can_count, new_plastic_count, new_general_count, new_glass_count])
            print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà Google Sheets ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÄ‡πÄ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà!")


        # ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Gmail
        if new_can_count > 5:
            subject = "‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á‡πÄ‡∏ï‡πá‡∏°‡πÄ‡πÄ‡∏•‡πâ‡∏ß"
            message_text = "‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á‡πÄ‡∏ï‡πá‡∏°‡πÄ‡πÄ‡∏•‡πâ‡∏ß !!!!!!! "
            send_email(receiver_email, subject, message_text)

        if new_plastic_count > 5:
            subject = "‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏ß‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏ï‡πá‡∏°‡πÄ‡πÄ‡∏•‡πâ‡∏ß"
            message_text = "‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏ß‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏ï‡πá‡∏°‡πÄ‡πÄ‡∏•‡πâ‡∏ß !!!!!!! "
            send_email(receiver_email, subject, message_text)

        if new_general_count > 5:
            subject = "‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏¢‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏ï‡πá‡∏°‡πÄ‡πÄ‡∏•‡πâ‡∏ß"
            message_text = "‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏¢‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏ï‡πá‡∏°‡πÄ‡πÄ‡∏•‡πâ‡∏ß !!!!!!! "
            send_email(receiver_email, subject, message_text)

        if new_glass_count > 5:
            subject = "‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡πÄ‡∏Å‡πâ‡∏ß‡∏ô‡πâ‡∏≥‡πÄ‡∏ï‡πá‡∏°‡πÄ‡πÄ‡∏•‡πâ‡∏ß"
            message_text = "‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡πÄ‡∏Å‡πâ‡∏ß‡∏ô‡πâ‡∏≥‡πÄ‡∏ï‡πá‡∏°‡πÄ‡πÄ‡∏•‡πâ‡∏ß !!!!!!! "
            send_email(receiver_email, subject, message_text)

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Google Sheets: {e}")



#‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô  ****************************************************************
# ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Email **************************************************
#plastic_count, glass_count, bag_count, general_count = 10, 10, 10, 10
#receiver_email, subject, message_text

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
has_reset = False  

# ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î
if not has_reset:
    reset_position()
    print("‚úÖ Motor ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MQTT...")
    has_reset = True  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
def on_message(client, userdata, msg):
    global can_count, plastic_count, general_count, glass_count
    command = msg.payload.decode()
    if command == "Can":
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô ‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á")
        Can()
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets
        update_google_sheets(can_count, plastic_count, general_count, glass_count)
        can_count, plastic_count, general_count, glass_count = 0, 0, 0, 0



    elif command == "Plastic_Bottle":
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô ‡∏Ç‡∏ß‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å")
        Plastic_Bottle()
        update_google_sheets(can_count, plastic_count, general_count, glass_count)
        can_count, plastic_count, general_count, glass_count = 0, 0, 0, 0


        
    elif command == "General_Waste":
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô ‡∏Ç‡∏¢‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")
        General_Waste()
        update_google_sheets(can_count, plastic_count, general_count, glass_count)
        can_count, plastic_count, general_count, glass_count = 0, 0, 0, 0



    elif command == "Glass":
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô ‡πÄ‡πÄ‡∏Å‡πâ‡∏ß‡∏ô‡πâ‡∏≥")
        Glass()
        update_google_sheets(can_count, plastic_count, general_count, glass_count)
        can_count, plastic_count, general_count, glass_count = 0, 0, 0, 0



# mqtt****************************************************
try:
    #client = mqtt.Client() ‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤
    client = mqtt.Client(protocol=mqtt.MQTTv5)
    client.on_message = on_message
    client.connect(broker, port, 60)
    client.subscribe(topic)
    #client.loop_forever()  ‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏≤

    while True:
        try:
            client.loop_forever()
        except Exception as e:
            print(f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT ‡∏´‡∏•‡∏∏‡∏î: {e}")
            time.sleep(5)  # ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            client.reconnect()

except KeyboardInterrupt:
    print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
finally:
    GPIO.cleanup()