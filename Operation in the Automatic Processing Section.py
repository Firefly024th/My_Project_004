import numpy as np
import tensorflow.lite as tflite
import paho.mqtt.client as mqtt
import time
import threading
import queue
import cv2

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
interpreter = tflite.Interpreter(model_path="waste_classifier.tflite")
interpreter.allocate_tensors()

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡∏û‡∏∏‡∏ï
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
input_shape = input_details[0]['shape']  # [1, 224, 224, 3]
input_size = (input_shape[1], input_shape[2])  # (224, 224)

# ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
cap = cv2.VideoCapture(1)  # ‡πÉ‡∏ä‡πâ 0 ‡πÅ‡∏ó‡∏ô 1 ‡∏ñ‡πâ‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà 0

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ MQTT
broker = "192.168.43.185"
port = 1883
topic = "Waste"

client = mqtt.Client(protocol=mqtt.MQTTv5)
client.connect(broker, port, 60)
client.loop_start()

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏•‡∏≤‡∏™‡∏Ç‡∏¢‡∏∞
class_labels = ["Can", "Plastic_Bottle", "General_Waste", "Glass"]

# ‡πÉ‡∏ä‡πâ Queue ‡πÅ‡∏•‡∏∞ Event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
frame_queue = queue.Queue(maxsize=1)  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î queue
message_queue = queue.Queue()
process_event = threading.Event()  # ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•

running = True  # ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ò‡∏£‡∏î
last_message = None
last_sent_time = 0  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á MQTT ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
send_interval = 8  # ‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å 8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ)
last_print_time = 0  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

# ===================== üì∑ ‡πÄ‡∏ò‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á =====================
def read_camera():
    global running
    while running:
        ret, frame = cap.read()
        if ret:
            if not frame_queue.full():  # ‡∏ñ‡πâ‡∏≤ Queue ‡πÑ‡∏°‡πà‡πÄ‡∏ï‡πá‡∏° ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
                frame_queue.put(frame)
            cv2.imshow("Camera", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            running = False  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î q

# ===================== üì∑ ‡πÄ‡∏ò‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á =====================

def draw_crosshairs(frame):
    """ ‡∏ß‡∏≤‡∏î‡∏Å‡∏≤‡∏Å‡∏ö‡∏≤‡∏ó‡∏•‡∏á‡∏ö‡∏ô‡∏†‡∏≤‡∏û """
    height, width = frame.shape[:2]
    center_x, center_y = width // 2, height // 2

    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏≤‡∏Å‡∏ö‡∏≤‡∏ó
    cv2.line(frame, (center_x - 20, center_y), (center_x + 20, center_y), (0, 255, 0), 2)
    cv2.line(frame, (center_x, center_y - 20), (center_x, center_y + 20), (0, 255, 0), 2)
    
    return center_x, center_y

def detect_object_in_crosshair(frame, center_x, center_y, threshold=100):
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏Å‡∏ö‡∏≤‡∏ó """
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, threshold, 255, cv2.THRESH_BINARY)
    
    # ‡∏´‡∏≤‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡∏†‡∏≤‡∏û
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    for contour in contours:
        # ‡∏´‡∏≤ bounding box ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
        x, y, w, h = cv2.boundingRect(contour)
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏Å‡∏ö‡∏≤‡∏ó‡∏ï‡∏±‡∏î‡∏ú‡πà‡∏≤‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
        if x < center_x < x + w and y < center_y < y + h:
            return True
    return False

# ===================== üîç ‡πÄ‡∏ò‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û =====================

def process_frame():
    global last_message, last_sent_time, last_print_time
    while running:
        try:
            frame = frame_queue.get(timeout=1)  # ‡∏î‡∏∂‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å Queue
            center_x, center_y = draw_crosshairs(frame)  # ‡∏ß‡∏≤‡∏î‡∏Å‡∏≤‡∏Å‡∏ö‡∏≤‡∏ó
            object_detected = detect_object_in_crosshair(frame, center_x, center_y)

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
            img = cv2.resize(frame, input_size)
            img = img.astype(np.float32) / 255.0  # Normalize
            img = np.expand_dims(img, axis=0)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏¥‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô [1, 224, 224, 3]

            # ‡πÉ‡∏™‡πà‡∏†‡∏≤‡∏û‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•
            interpreter.set_tensor(input_details[0]['index'], img)
            interpreter.invoke()

            # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            output_data = interpreter.get_tensor(output_details[0]['index'])[0]  # [4]
            predicted_class = np.argmax(output_data)
            confidence = np.max(output_data)

            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
            sorted_indices = np.argsort(output_data)[::-1]  # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πâ‡∏ô
            best_index = sorted_indices[0]  # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            second_best_index = sorted_indices[1]  # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏£‡∏≠‡∏á‡∏•‡∏á‡∏°‡∏≤

            best_confidence = output_data[best_index]
            second_best_confidence = output_data[second_best_index]

            # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 0.85 ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤
            if best_confidence < 0.88:
                current_time = time.time()
                if current_time - last_print_time > 2:
                    print("None - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
                    last_print_time = current_time
                continue  # ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡πà‡∏≠

            # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Å‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏™‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤
            if best_confidence - second_best_confidence < 0.1:
                current_time = time.time()
                if current_time - last_print_time > 2:
                    print("None - ‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
                    last_print_time = current_time
                continue

            # ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            new_message = class_labels[best_index]
            current_time = time.time()

            if new_message != last_message or (current_time - last_sent_time > send_interval):
                last_message = new_message
                last_sent_time = current_time
                message_queue.put(new_message)

                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå
                label = f"{class_labels[best_index]} ({best_confidence*100:.2f}%)"
                cv2.putText(frame, label, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

                print(f"‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: {label}")

        except queue.Empty:
            continue

# ===================== üì° ‡πÄ‡∏ò‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MQTT =====================

def publish_mqtt():
    while running:
        try:
            msg = message_queue.get(timeout=1)
            client.publish(topic, msg)
            print(f"üì¢ Published: {msg}")
        except queue.Empty:
            continue

# ===================== üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡πÄ‡∏ò‡∏£‡∏î =====================

camera_thread = threading.Thread(target=read_camera, daemon=True)
process_thread = threading.Thread(target=process_frame, daemon=True)
mqtt_thread = threading.Thread(target=publish_mqtt, daemon=True)

camera_thread.start()
process_thread.start()
mqtt_thread.start()

# ===================== üéÆ ‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡πÄ‡∏ò‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å =====================

while running:
    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        running = False  # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ò‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        break
    time.sleep(0.1)  # ‡∏•‡∏î CPU Usage

# ===================== üîö ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ =====================

camera_thread.join()
process_thread.join()
mqtt_thread.join()

client.loop_stop()
client.disconnect()
cap.release()
cv2.destroyAllWindows()
